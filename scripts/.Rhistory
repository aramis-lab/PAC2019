# New function with 50fold CV
library(caret)
linearCombinationOfPredictors5FoldCV=function(iter, scoreList){
mae=sr=rr=rrank=coefsMean=NULL
dat=read.table(paste0("validation/Dat_iter_", iter, "_enhanced.tsv"), header=T, stringsAsFactors = F)
for (nCV in 1:50){
coefs=NULL
# define training control
dataa=dat[which(!is.na(dat$meancombinedage)),]
if( length(which(colSums(!is.na(dataa))==0))>0){
dataa=dataa[,-which(colSums(!is.na(dataa))==0)]
}
flds <- createFolds(dataa$subject_ID, k = 5, list = TRUE, returnTrain = FALSE)
dataa$combinedage=NA
for (nfold in 1:5){
train=dataa[-flds[[nfold]],]
predages=colnames(dataa)[which(colnames(dataa) %in% scoreList )]
m1=lm(as.formula(paste("age ~ 0 + ", paste(predages , collapse="+"))), data=train, na.action = "na.omit")
dataa$combinedage[flds[[nfold]]]=predict(m1, newdata = dataa[flds[[nfold]],])
coefs=rbind(coefs, summary(m1)$coeff[,1])
if (iter ==0){
write.table(dataa, paste0("validation/iter0_LM_siter", nfold, ".txt"), col.names = T, row.names = F, quote=F) }
}
dataa[,paste0("agedif_combinedage")]=dataa$age-dataa[,"combinedage"]
mae=c(mae, mean(abs(dataa[,paste0("agedif_combinedage")]), na.rm = T))
sr=c(sr, cor(dataa$age,dataa[,paste0("agedif_combinedage")], use="p", method = "s"))
rr=c(rr, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "p"))
rrank=c(rrank, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "s"))
coefsMean=rbind(coefsMean,colMeans(coefs))
}
return(cbind(mae, sr, rr, rrank, coefsMean ))
}
res=read.table("../src/validation/performances_AllAlgo_enhanced.txt", header=T)
res2=read.table("../src/validation/performances_AllAlgo_MA.txt", header=T, sep="\t")
res=cbind(res, res2[,grep(colnames(res2), pattern = "rf")])
meanLM=rrankLM=rrLM=rsLM=NULL
for (iter in 0:4){
resWeighted=linearCombinationOfPredictors5FoldCV(iter = iter, scoreList = paste0(c("ggnet", "resnet", "bbnet", "svm","lmmmean", "lmmquant", "obbnet"), "age") )
meanLM=c(meanLM, mean(resWeighted[,1]) )
rrLM=c(rrLM, mean(resWeighted[,3]) )
rsLM=c(rsLM, mean(resWeighted[,2]) )
rrankLM=c(rrankLM, mean(resWeighted[,4]) )
}
# New function with 50fold CV
library(caret)
linearCombinationOfPredictors5FoldCV=function(iter, scoreList){
mae=sr=rr=rrank=coefsMean=NULL
dat=read.table(paste0("../src/validation/Dat_iter_", iter, "_enhanced.tsv"), header=T, stringsAsFactors = F)
for (nCV in 1:50){
coefs=NULL
# define training control
dataa=dat[which(!is.na(dat$meancombinedage)),]
if( length(which(colSums(!is.na(dataa))==0))>0){
dataa=dataa[,-which(colSums(!is.na(dataa))==0)]
}
flds <- createFolds(dataa$subject_ID, k = 5, list = TRUE, returnTrain = FALSE)
dataa$combinedage=NA
for (nfold in 1:5){
train=dataa[-flds[[nfold]],]
predages=colnames(dataa)[which(colnames(dataa) %in% scoreList )]
m1=lm(as.formula(paste("age ~ 0 + ", paste(predages , collapse="+"))), data=train, na.action = "na.omit")
dataa$combinedage[flds[[nfold]]]=predict(m1, newdata = dataa[flds[[nfold]],])
coefs=rbind(coefs, summary(m1)$coeff[,1])
if (iter ==0){
write.table(dataa, paste0("validation/iter0_LM_siter", nfold, ".txt"), col.names = T, row.names = F, quote=F) }
}
dataa[,paste0("agedif_combinedage")]=dataa$age-dataa[,"combinedage"]
mae=c(mae, mean(abs(dataa[,paste0("agedif_combinedage")]), na.rm = T))
sr=c(sr, cor(dataa$age,dataa[,paste0("agedif_combinedage")], use="p", method = "s"))
rr=c(rr, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "p"))
rrank=c(rrank, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "s"))
coefsMean=rbind(coefsMean,colMeans(coefs))
}
return(cbind(mae, sr, rr, rrank, coefsMean ))
}
library(scales)
res=read.table("../src/validation/performances_AllAlgo_enhanced.txt", header=T)
res2=read.table("../src/validation/performances_AllAlgo_MA.txt", header=T, sep="\t")
res=cbind(res, res2[,grep(colnames(res2), pattern = "rf")])
meanLM=rrankLM=rrLM=rsLM=NULL
for (iter in 0:4){
resWeighted=linearCombinationOfPredictors5FoldCV(iter = iter, scoreList = paste0(c("ggnet", "resnet", "bbnet", "svm","lmmmean", "lmmquant", "obbnet"), "age") )
meanLM=c(meanLM, mean(resWeighted[,1]) )
rrLM=c(rrLM, mean(resWeighted[,3]) )
rsLM=c(rsLM, mean(resWeighted[,2]) )
rrankLM=c(rrankLM, mean(resWeighted[,4]) )
}
# New function with 50fold CV
library(caret)
linearCombinationOfPredictors5FoldCV=function(iter, scoreList){
mae=sr=rr=rrank=coefsMean=NULL
dat=read.table(paste0("../src/validation/Dat_iter_", iter, "_enhanced.tsv"), header=T, stringsAsFactors = F)
for (nCV in 1:50){
coefs=NULL
# define training control
dataa=dat[which(!is.na(dat$meancombinedage)),]
if( length(which(colSums(!is.na(dataa))==0))>0){
dataa=dataa[,-which(colSums(!is.na(dataa))==0)]
}
flds <- createFolds(dataa$subject_ID, k = 5, list = TRUE, returnTrain = FALSE)
dataa$combinedage=NA
for (nfold in 1:5){
train=dataa[-flds[[nfold]],]
predages=colnames(dataa)[which(colnames(dataa) %in% scoreList )]
m1=lm(as.formula(paste("age ~ 0 + ", paste(predages , collapse="+"))), data=train, na.action = "na.omit")
dataa$combinedage[flds[[nfold]]]=predict(m1, newdata = dataa[flds[[nfold]],])
coefs=rbind(coefs, summary(m1)$coeff[,1])
if (iter ==0){
write.table(dataa, paste0("../src/validation/iter0_LM_siter", nfold, ".txt"), col.names = T, row.names = F, quote=F) }
}
dataa[,paste0("agedif_combinedage")]=dataa$age-dataa[,"combinedage"]
mae=c(mae, mean(abs(dataa[,paste0("agedif_combinedage")]), na.rm = T))
sr=c(sr, cor(dataa$age,dataa[,paste0("agedif_combinedage")], use="p", method = "s"))
rr=c(rr, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "p"))
rrank=c(rrank, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "s"))
coefsMean=rbind(coefsMean,colMeans(coefs))
}
return(cbind(mae, sr, rr, rrank, coefsMean ))
}
library(scales)
res=read.table("../src/validation/performances_AllAlgo_enhanced.txt", header=T)
res2=read.table("../src/validation/performances_AllAlgo_MA.txt", header=T, sep="\t")
res=cbind(res, res2[,grep(colnames(res2), pattern = "rf")])
meanLM=rrankLM=rrLM=rsLM=NULL
for (iter in 0:4){
resWeighted=linearCombinationOfPredictors5FoldCV(iter = iter, scoreList = paste0(c("ggnet", "resnet", "bbnet", "svm","lmmmean", "lmmquant", "obbnet"), "age") )
meanLM=c(meanLM, mean(resWeighted[,1]) )
rrLM=c(rrLM, mean(resWeighted[,3]) )
rsLM=c(rsLM, mean(resWeighted[,2]) )
rrankLM=c(rrankLM, mean(resWeighted[,4]) )
}
resWeighted
mean(resWeighted[,1])
sd(resWeighted[,1])/sqrt(50)
library(caret)
linearCombinationOfPredictors5FoldCV=function(iter, scoreList){
mae=se_mae=sr=rr=rrank=coefsMean=NULL
dat=read.table(paste0("../src/validation/Dat_iter_", iter, "_enhanced.tsv"), header=T, stringsAsFactors = F)
for (nCV in 1:50){
coefs=NULL
# define training control
dataa=dat[which(!is.na(dat$meancombinedage)),]
if( length(which(colSums(!is.na(dataa))==0))>0){
dataa=dataa[,-which(colSums(!is.na(dataa))==0)]
}
flds <- createFolds(dataa$subject_ID, k = 5, list = TRUE, returnTrain = FALSE)
dataa$combinedage=NA
for (nfold in 1:5){
train=dataa[-flds[[nfold]],]
predages=colnames(dataa)[which(colnames(dataa) %in% scoreList )]
m1=lm(as.formula(paste("age ~ 0 + ", paste(predages , collapse="+"))), data=train, na.action = "na.omit")
dataa$combinedage[flds[[nfold]]]=predict(m1, newdata = dataa[flds[[nfold]],])
coefs=rbind(coefs, summary(m1)$coeff[,1])
if (iter ==0){
write.table(dataa, paste0("../src/validation/iter0_LM_siter", nfold, ".txt"), col.names = T, row.names = F, quote=F) }
}
dataa[,paste0("agedif_combinedage")]=dataa$age-dataa[,"combinedage"]
mae=c(mae, mean(abs(dataa[,paste0("agedif_combinedage")]), na.rm = T))
se_mae=sd(abs(dataa[,paste0("agedif_combinedage")]), na.rm = T)/sqrt(length(dataa$agedif_combinedage))
sr=c(sr, cor(dataa$age,dataa[,paste0("agedif_combinedage")], use="p", method = "s"))
rr=c(rr, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "p"))
rrank=c(rrank, cor(dataa$age,dataa[,"combinedage"] , use="p", method = "s"))
coefsMean=rbind(coefsMean,colMeans(coefs))
}
return(cbind(mae,se_mae, sr, rr, rrank, coefsMean ))
}
library(scales)
res=read.table("../src/validation/performances_AllAlgo_enhanced.txt", header=T)
res2=read.table("../src/validation/performances_AllAlgo_MA.txt", header=T, sep="\t")
res=cbind(res, res2[,grep(colnames(res2), pattern = "rf")])
meanLM=rrankLM=rrLM=rsLM=NULL
for (iter in 0:4){
resWeighted=linearCombinationOfPredictors5FoldCV(iter = iter, scoreList = paste0(c("ggnet", "resnet", "bbnet", "svm","lmmmean", "lmmquant", "obbnet"), "age") )
meanLM=c(meanLM, mean(resWeighted[,1]) )
rrLM=c(rrLM, mean(resWeighted[,3]) )
rsLM=c(rsLM, mean(resWeighted[,2]) )
rrankLM=c(rrankLM, mean(resWeighted[,4]) )
write.table(resWeighted, paste0("../src/validation/summaryLM_scoreCombine_iter", iter, ".tsv"), sep="\t", col.names = T, row.names = F )
}
resWeighted
sd(resWeighted[,1])/sqrt(50)
